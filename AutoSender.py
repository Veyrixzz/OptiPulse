from hikka import loader, utils
import asyncio

@loader.tds
class AutoSenderMod(loader.Module):
    strings = {
        "name": "AutoSpammer",
        "start_spam": "‚úÖ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.",
        "stop_spam": "‚õî –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        "interval_set": "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {} —Å–µ–∫—É–Ω–¥.",
        "text_set": "üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
        "targets_set": "üéØ –¶–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {}.",
        "no_targets": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–∏ (–≥—Ä—É–ø–ø—ã/–ø–∞–ø–∫–∏).",
        "no_text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "folder_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏: {}",
    }

    def __init__(self):
        self.text = None
        self.targets = []
        self.interval = 60
        self.task = None
        self.running = False

    async def autogroupcmd(self, message):
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("no_targets"))
        
        self.targets = args.split()
        await utils.answer(message, self.strings("targets_set").format(', '.join(self.targets)))

    async def autotextcmd(self, message):
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("no_text"))
        self.text = args
        await utils.answer(message, self.strings("text_set"))

    async def autotimecmd(self, message):
        args = utils.get_args(message)
        if not args or not args[0].isdigit():
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
        self.interval = int(args[0])
        await utils.answer(message, self.strings("interval_set").format(self.interval))

    async def autosendcmd(self, message):
        if self.running:
            self.running = False
            if self.task:
                self.task.cancel()
            return await utils.answer(message, self.strings("stop_spam"))
        if not self.targets:
            return await utils.answer(message, self.strings("no_targets"))
        if not self.text:
            return await utils.answer(message, self.strings("no_text"))

        self.running = True
        self.task = asyncio.create_task(self._autospam())
        await utils.answer(message, self.strings("start_spam"))

    async def _get_chats_from_folder(self, folder_link):
        try:
            folder = await self._client.get_entity(folder_link)
            if not hasattr(folder, 'chats'):
                return []
            return folder.chats
        except Exception as e:
            print(f"[AutoSpammer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {e}")
            return []

    async def _autospam(self):
        try:
            while self.running:
                for target in self.targets:
                    try:
                        if "folder" in target.lower():
                            chats = await self._get_chats_from_folder(target)
                            for chat in chats:
                                try:
                                    await self._client.send_message(chat.id, self.text)
                                except Exception as e:
                                    print(f"[AutoSpammer] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat.id} –∏–∑ –ø–∞–ø–∫–∏: {e}")
                        else:
                            await self._client.send_message(target, self.text)
                    except Exception as e:
                        print(f"[AutoSpammer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–ª–∏ {target}: {e}")
                
                await asyncio.sleep(self.interval)
        except asyncio.CancelledError:
            pass
