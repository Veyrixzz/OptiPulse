# meta developer: @OptiPulseMod

"""
AutoSpammer Module for Heroku Userbot

Copyright (c) 2025 @OptiPulseMod

License:

EN:
This module is developed by @OptiPulseMod and provided "as is".
Use is only permitted in its original, unmodified form.
Copying, modification, or redistribution is strictly prohibited.

RU:
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @OptiPulseMod –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å".
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º, –Ω–µ–∏–∑–º–µ–Ω—ë–Ω–Ω–æ–º –≤–∏–¥–µ.
–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.
"""

from hikka import loader, utils
import asyncio
from telethon.tl.types import Dialog, Folder, InputPeerChannel, InputPeerChat

@loader.tds
class AutoSenderMod(loader.Module):
    """–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç—ã/–ø–∞–ø–∫–∏ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""

    strings = {
        "name": "AutoSpammerPro",
        "start_spam": "‚úÖ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.",
        "stop_spam": "‚õî –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        "interval_set": "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {} —Å–µ–∫—É–Ω–¥.",
        "text_set": "üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
        "chats_set": "üí¨ –ß–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {}.",
        "folders_set": "üìÇ –ü–∞–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {}.",
        "no_targets": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∏ —á–∞—Ç—ã, –Ω–∏ –ø–∞–ø–∫–∏.",
        "no_text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "folder_processing": "üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {} ({} —á–∞—Ç–æ–≤)",
        "folder_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏: {}",
        "invalid_chat": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Ç: {}",
        "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –∏–∑ {} —Å–æ–æ–±—â–µ–Ω–∏–π",
        "delay_set": "‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {} —Å–µ–∫.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "delay_between_messages",
                1,
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–µ–∫)",
                validator=loader.validators.Integer(minimum=1, maximum=60)
            )
        )
        self.text = None
        self.chats = []  # –û—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã
        self.folders = []  # –ü–∞–ø–∫–∏ —Å —á–∞—Ç–∞–º–∏
        self.interval = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        self.task = None
        self.running = False
        self.message = None

    async def client_ready(self, client, db):
        self.client = client

    @loader.command(alias="autochat")
    async def autochatcmd(self, message):
        """<@ –∏–ª–∏ ID —á–∞—Ç–æ–≤> - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        
        new_chats = args.split()
        self.chats.extend(new_chats)
        self.chats = list(set(self.chats))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
        
        await utils.answer(message, self.strings("chats_set").format(', '.join(self.chats)))

    @loader.command(alias="autofolder")
    async def autofoldercmd(self, message):
        """<–Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫> - –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        
        new_folders = [f.strip() for f in args.split(",")]
        self.folders.extend(new_folders)
        self.folders = list(set(self.folders))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
        
        await utils.answer(message, self.strings("folders_set").format(', '.join(self.folders)))

    @loader.command(alias="autotext")
    async def autotextcmd(self, message):
        """<—Ç–µ–∫—Å—Ç> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("no_text"))
        self.text = args
        await utils.answer(message, self.strings("text_set"))

    @loader.command(alias="autotime")
    async def autotimecmd(self, message):
        """<—Å–µ–∫—É–Ω–¥—ã> - –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = utils.get_args(message)
        if not args or not args[0].isdigit():
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
        self.interval = int(args[0])
        await utils.answer(message, self.strings("interval_set").format(self.interval))

    @loader.command(alias="autodelay")
    async def autodelaycmd(self, message):
        """<—Å–µ–∫—É–Ω–¥—ã> - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        args = utils.get_args(message)
        if not args or not args[0].isdigit():
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60")
        self.config["delay_between_messages"] = int(args[0])
        await utils.answer(message, self.strings("delay_set").format(self.config["delay_between_messages"]))

    @loader.command(alias="autosend")
    async def autosendcmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        self.message = message
        if self.running:
            self.running = False
            if self.task:
                self.task.cancel()
            return await utils.answer(message, self.strings("stop_spam"))
        
        if not self.chats and not self.folders:
            return await utils.answer(message, self.strings("no_targets"))
        if not self.text:
            return await utils.answer(message, self.strings("no_text"))

        self.running = True
        self.task = asyncio.create_task(self._autospam())
        await utils.answer(message, self.strings("start_spam"))

    async def _get_all_targets(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ü–µ–ª–∏: –∏ —á–∞—Ç—ã, –∏ –∏–∑ –ø–∞–ø–æ–∫"""
        targets = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã
        targets.extend(self.chats)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã –∏–∑ –ø–∞–ø–æ–∫
        if self.folders:
            dialogs = await self.client.get_dialogs()
            for folder_name in self.folders:
                folder_chats = []
                for dialog in dialogs:
                    if hasattr(dialog, 'folder') and dialog.folder and dialog.folder.title.lower() == folder_name.lower():
                        try:
                            entity = await self.client.get_input_entity(dialog.entity)
                            folder_chats.append(entity)
                        except Exception as e:
                            print(f"[AutoSpammer] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è entity: {e}")
                
                if folder_chats:
                    targets.extend(folder_chats)
                    await utils.answer(self.message, self.strings("folder_processing").format(
                        folder_name, len(folder_chats)
                    )
                else:
                    await utils.answer(self.message, self.strings("folder_error").format(folder_name))
        
        return list(set(targets))  # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏

    async def _autospam(self):
        while self.running:
            targets = await self._get_all_targets()
            if not targets:
                await utils.answer(self.message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
                self.running = False
                return
            
            total = len(targets)
            success = 0
            
            for target in targets:
                if not self.running:
                    break
                
                try:
                    await self.client.send_message(target, self.text)
                    success += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if success % 5 == 0:
                        await utils.answer(self.message, self.strings("stats").format(success, total))
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(self.config["delay_between_messages"])
                except Exception as e:
                    print(f"[AutoSpammer] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target}: {e}")
                    if "InputPeerChat" in str(target):
                        await utils.answer(self.message, self.strings("invalid_chat").format(target))
            
            if self.running:
                final_msg = f"üåÄ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: {success}/{total}"
                if success < total:
                    final_msg += f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {total - success}"
                await utils.answer(self.message, final_msg)
                await asyncio.sleep(self.interval)
