# meta developer: @OptiPulseMod

"""
AutoSpammer Module for Heroku Userbot

Copyright (c) 2025 @OptiPulseMod


License:

EN:
This module is developed by @OptiPulseMod and provided "as is".
Use is only permitted in its original, unmodified form.
Copying, modification, or redistribution is strictly prohibited.

RU:
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @OptiPulseMod –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å".
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º, –Ω–µ–∏–∑–º–µ–Ω—ë–Ω–Ω–æ–º –≤–∏–¥–µ.
–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.
"""

from hikka import loader, utils
import asyncio
from telethon.tl.types import Dialog, Folder, InputPeerChannel, InputPeerChat

@loader.tds
class AutoSenderMod(loader.Module):
    """–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã/–ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"""

    strings = {
        "name": "AutoSpammer",
        "start_spam": "‚úÖ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.",
        "stop_spam": "‚õî –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        "interval_set": "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {} —Å–µ–∫—É–Ω–¥.",
        "text_set": "üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
        "groups_set": "üì® –ì—Ä—É–ø–ø—ã/–ø–∞–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {}.",
        "no_groups": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –≥—Ä—É–ø–ø—ã/–ø–∞–ø–∫–∏.",
        "no_text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "folder_processing": "üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {}",
        "folder_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏: {}",
        "invalid_target": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–ª—å: {}",
    }

    def __init__(self):
        self.text = None
        self.groups = []
        self.interval = 60
        self.task = None
        self.running = False
        self.message = None

    async def client_ready(self, client, db):
        self.client = client

    async def autogroupcmd(self, message):
        """<—Å—Å—ã–ª–∫–∏_–∏–ª–∏_ID_–≥—Ä—É–ø–ø/–ø–∞–ø–æ–∫> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø/–ø–∞–ø–æ–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("no_groups"))
        self.groups = args.split()
        await utils.answer(message, self.strings("groups_set").format(', '.join(self.groups)))

    async def autotextcmd(self, message):
        """<—Ç–µ–∫—Å—Ç> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("no_text"))
        self.text = args
        await utils.answer(message, self.strings("text_set"))

    async def autotimecmd(self, message):
        """<—Å–µ–∫—É–Ω–¥—ã> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        args = utils.get_args(message)
        if not args or not args[0].isdigit():
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
        self.interval = int(args[0])
        await utils.answer(message, self.strings("interval_set").format(self.interval))

    async def autosendcmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫—É"""
        self.message = message
        if self.running:
            self.running = False
            if self.task:
                self.task.cancel()
            return await utils.answer(message, self.strings("stop_spam"))
        
        if not self.groups:
            return await utils.answer(message, self.strings("no_groups"))
        if not self.text:
            return await utils.answer(message, self.strings("no_text"))

        self.running = True
        self.task = asyncio.create_task(self._autospam())
        await utils.answer(message, self.strings("start_spam"))

    async def _get_chats_from_folder(self, folder_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        try:
            dialogs = await self.client.get_dialogs()
            folder_chats = []
            
            for dialog in dialogs:
                if hasattr(dialog, 'folder') and dialog.folder and dialog.folder.title.lower() == folder_name.lower():
                    if isinstance(dialog.entity, (InputPeerChannel, InputPeerChat)):
                        folder_chats.append(dialog.entity)
                    else:
                        try:
                            entity = await self.client.get_input_entity(dialog.entity)
                            folder_chats.append(entity)
                        except Exception as e:
                            print(f"[AutoSpammer] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            
            return folder_chats
        except Exception as e:
            print(f"[AutoSpammer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {e}")
            return []

    async def _autospam(self):
        while self.running:
            for target in self.groups:
                try:
                    # –ï—Å–ª–∏ —Ü–µ–ª—å - –ø–∞–ø–∫–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å folder:)
                    if target.lower().startswith("folder:"):
                        folder_name = target[7:].strip()
                        await utils.answer(self.message, self.strings("folder_processing").format(folder_name))
                        
                        chats = await self._get_chats_from_folder(folder_name)
                        if not chats:
                            await utils.answer(self.message, self.strings("folder_error").format(folder_name))
                            continue
                            
                        for chat in chats:
                            try:
                                await self.client.send_message(chat, self.text)
                                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                            except Exception as e:
                                print(f"[AutoSpammer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat}: {e}")
                    else:
                        # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞/—á–∞—Ç
                        try:
                            await self.client.send_message(target, self.text)
                        except Exception as e:
                            print(f"[AutoSpammer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {e}")
                            await utils.answer(self.message, self.strings("invalid_target").format(target))
                except Exception as e:
                    print(f"[AutoSpammer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–ª–∏ {target}: {e}")
            
            await asyncio.sleep(self.interval)
