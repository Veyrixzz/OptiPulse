# meta developer: @OptiPulseMod
# scope: user
# requires: hikka

"""
AutoSpammer Module for Hikka Userbot
–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
"""

from hikka import loader, utils
import asyncio

@loader.tds
class AutoSenderMod(loader.Module):
    """–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""

    strings = {
        "name": "AutoSender",
        "start": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!",
        "stop": "‚õî –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç",
        "no_targets": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–∏ (—á–∞—Ç—ã)",
        "added_chats": "üí¨ –î–æ–±–∞–≤–ª–µ–Ω—ã —á–∞—Ç—ã: {}",
        "text_set": "üìù –¢–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "delay_set": "‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {} –º–∏–Ω",
        "sending_stats": "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {}/{}",
        "error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {}: {}",
    }

    def __init__(self):
        self.text = None
        self.chats = []
        self.delay = 1  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        self.running = False
        self.task = None

    @loader.command()
    async def aspam_text(self, message):
        """<HTML-—Ç–µ–∫—Å—Ç> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = utils.get_args_raw(message)
        if not text:
            return await utils.answer(message, self.strings("no_text"))
        self.text = text
        await utils.answer(message, self.strings("text_set"))

    @loader.command()
    async def aspam_chats(self, message):
        """<@—é–∑–µ—Ä/ID> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        self.chats = list(set(args.split()))
        await utils.answer(message, self.strings("added_chats").format(len(self.chats)))

    @loader.command()
    async def aspam_delay(self, message):
        """<–º–∏–Ω> ‚Äî –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)"""
        args = utils.get_args_raw(message)
        try:
            d = float(args)
            self.delay = d
            await utils.answer(message, self.strings("delay_set").format(d))
        except:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

    @loader.command()
    async def aspam_start(self, message):
        """üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.text:
            return await utils.answer(message, self.strings("no_text"))
        if not self.chats:
            return await utils.answer(message, self.strings("no_targets"))
        if self.running:
            return await utils.answer(message, "‚ùó –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        self.running = True
        self.task = asyncio.create_task(self._spam_loop(message))
        await utils.answer(message, self.strings("start"))

    @loader.command()
    async def aspam_stop(self, message):
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        self.running = False
        if self.task:
            self.task.cancel()
        await utils.answer(message, self.strings("stop"))

    async def _spam_loop(self, message):
        total = len(self.chats)
        success = 0
        while self.running:
            for chat in self.chats:
                if not self.running:
                    return
                try:
                    entity = await self.client.get_entity(chat)
                    await self.client.send_message(entity, self.text, parse_mode="html")
                    success += 1
                    await utils.answer(message, self.strings("sending_stats").format(success, total))
                    await asyncio.sleep(self.delay * 60)
                except Exception as e:
                    await utils.answer(message, self.strings("error").format(chat, str(e)))
