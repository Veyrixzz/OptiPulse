# meta developer: @OptiPulseMod

"""
AutoSpammer Module for Userbot (—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
"""

from hikka import loader, utils
import asyncio
from telethon.tl.types import Dialog, InputPeerChannel, InputPeerChat

@loader.tds
class AutoSenderMod(loader.Module):
    """–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""

    strings = {
        "name": "AccountSpammer",
        "start": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
        "stop": "‚õî –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
        "no_targets": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —á–∞—Ç—ã/–ø–∞–ø–∫–∏",
        "added_chats": "üí¨ –î–æ–±–∞–≤–ª–µ–Ω—ã —á–∞—Ç—ã: {}",
        "added_folders": "üìÇ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞–ø–∫–∏: {}",
        "text_set": "üìù –¢–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "interval_set": "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫",
        "delay_set": "‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞: {} —Å–µ–∫",
        "folder_stats": "üìä –í –ø–∞–ø–∫–µ '{}' –Ω–∞–π–¥–µ–Ω–æ {} —á–∞—Ç–æ–≤",
        "sending_stats": "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {}/{} —Å–æ–æ–±—â–µ–Ω–∏–π",
        "error": "‚ùå –û—à–∏–±–∫–∞ –≤ {}: {}"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(  # Fixed: Added closing parenthesis
            loader.ConfigValue(
                "delay",
                1,
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
                validator=loader.validators.Integer(minimum=1, maximum=10)
            )
        )
        self.text = None
        self.chats = []
        self.folders = []
        self.interval = 60
        self.task = None
        self.is_active = False

    async def client_ready(self, client, db):
        self.client = client

    @loader.command()
    async def aspam_chats(self, message):
        """<@username/id> - –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        
        self.chats = list(set(args.split()))
        await utils.answer(message, self.strings["added_chats"].format(len(self.chats)))

    @loader.command()
    async def aspam_folders(self, message):
        """<–Ω–∞–∑–≤–∞–Ω–∏—è> - –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        
        self.folders = [f.strip() for f in args.split(",")]
        await utils.answer(message, self.strings["added_folders"].format(len(self.folders)))

    @loader.command()
    async def aspam_text(self, message):
        """<—Ç–µ–∫—Å—Ç> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings["no_text"])
        
        self.text = args
        await utils.answer(message, self.strings["text_set"])

    @loader.command()
    async def aspam_start(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        if not self.text:
            return await utils.answer(message, self.strings["no_text"])
        if not self.chats and not self.folders:
            return await utils.answer(message, self.strings["no_targets"])

        self.is_active = True
        self.task = asyncio.create_task(self._spam_loop(message))
        await utils.answer(message, self.strings["start"])

    @loader.command()
    async def aspam_stop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        self.is_active = False
        if self.task:
            self.task.cancel()
        await utils.answer(message, self.strings["stop"])

    async def _get_chats_in_folder(self, folder_name):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —á–∞—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ"""
        try:
            dialogs = await self.client.get_dialogs()
            folder_chats = []
            
            for dialog in dialogs:
                if (hasattr(dialog, 'folder') and 
                    dialog.folder and 
                    dialog.folder.title.lower() == folder_name.lower()):
                    
                    try:
                        entity = await self.client.get_input_entity(dialog.entity)
                        folder_chats.append(entity)
                    except Exception as e:
                        print(f"Error getting entity: {e}")
            
            return folder_chats
        except Exception as e:
            print(f"Folder error: {e}")
            return []

    async def _spam_loop(self, message):
        while self.is_active:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏
            targets = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã
            targets.extend(self.chats)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã –∏–∑ –ø–∞–ø–æ–∫
            for folder in self.folders:
                folder_chats = await self._get_chats_in_folder(folder)
                if folder_chats:
                    targets.extend(folder_chats)
                    await utils.answer(
                        message,
                        self.strings["folder_stats"].format(folder, len(folder_chats))
                    )
            
            if not targets:
                await utils.answer(message, self.strings["no_targets"])
                self.is_active = False
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            total = len(targets)
            success = 0
            
            for target in targets:
                if not self.is_active:
                    break
                
                try:
                    await self.client.send_message(target, self.text)
                    success += 1
                    
                    if success % 5 == 0 or success == total:
                        await utils.answer(
                            message,
                            self.strings["sending_stats"].format(success, total)
                        )
                    
                    await asyncio.sleep(self.config["delay"])
                except Exception as e:
                    await utils.answer(
                        message,
                        self.strings["error"].format(target, str(e))
                    )
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            if self.is_active:
                await asyncio.sleep(self.interval)  # Fixed: Removed extra parenthesis
