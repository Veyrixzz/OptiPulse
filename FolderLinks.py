# meta developer: @OptiPulseMod
# scope: hikka_only
# scope: hikka_min 1.6.2

"""
FolderLinkExtractor Module for Hikka Userbot

Copyright (c) 2025 @OptiPulseMod
"""

from hikka import loader, utils
from telethon.tl.functions.messages import CheckChatInviteRequest
from telethon.tl.types import ChatInviteAlready
import re

@loader.tds
class FolderLinkExtractorMod(loader.Module):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ"""
    
    strings = {
        "name": "FolderLinkExtractor",
        "no_args": "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/addlist/gZYzUWty_K84NGMy)",
        "invalid_link": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞–ø–∫—É",
        "processing": "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É...",
        "success": "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —á–∞—Ç—ã –∏–∑ –ø–∞–ø–∫–∏:",
        "chat_info": "‚îú‚îÄ {title} (ID: {id})",
        "error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏: {}",
        "not_member": "‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ –∏–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    }

    async def flinkcmd(self, message):
        """<—Å—Å—ã–ª–∫–∞_–Ω–∞_–ø–∞–ø–∫—É> - –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –∏–∑ –ø–∞–ø–∫–∏"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("no_args"))

        match = re.match(r"https?://t\.me/addlist/([a-zA-Z0-9_-]+)", args)
        if not match:
            return await utils.answer(message, self.strings("invalid_link"))

        hash_link = match.group(1)
        await utils.answer(message, self.strings("processing"))

        try:
            invite = await self.client(CheckChatInviteRequest(hash_link))
            
            if not isinstance(invite, ChatInviteAlready):
                return await utils.answer(message, self.strings("not_member"))

            result = []
            for chat in invite.chats:
                result.append({
                    "id": chat.id,
                    "title": getattr(chat, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                })

            if not result:
                return await utils.answer(message, self.strings("not_member"))

            response = [self.strings("success")]
            for chat in result:
                response.append(
                    self.strings("chat_info").format(
                        title=chat["title"],
                        id=chat["id"]
                    )
                )
            
            await utils.answer(message, "\n".join(response))
            
        except Exception as e:
            await utils.answer(message, self.strings("error").format(str(e)))
