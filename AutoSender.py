# meta developer: @OptiPulseMod
# scope: user
# requires: hikka

"""
AutoSpammer Module for Hikka Userbot
–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –∏ –ø–∞–ø–∫–∏
"""

from hikka import loader, utils
from telethon.tl.types import Dialog
import asyncio

@loader.tds
class AutoSenderMod(loader.Module):
    """–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""

    strings = {
        "name": "AutoSender",
        "start": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!",
        "stop": "‚õî –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_text": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç",
        "no_targets": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–∏ (—á–∞—Ç—ã –∏–ª–∏ –ø–∞–ø–∫–∏)",
        "added_chats": "üí¨ –î–æ–±–∞–≤–ª–µ–Ω—ã —á–∞—Ç—ã: {}",
        "added_folders": "üìÇ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞–ø–∫–∏: {}",
        "text_set": "üìù –¢–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "delay_set": "‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {} —Å–µ–∫",
        "interval_set": "üîÅ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫",
        "folder_stats": "üìä –í –ø–∞–ø–∫–µ '{}' –Ω–∞–π–¥–µ–Ω–æ {} —á–∞—Ç–æ–≤",
        "sending_stats": "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {}/{}",
        "error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {}: {}",
        "invalid_delay": "‚ùó –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 10 —Å–µ–∫",
        "invalid_interval": "‚ùó –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 10 —Å–µ–∫",
    }

    def __init__(self):
        self.text = None
        self.chats = []
        self.folders = []
        self.delay = 2
        self.interval = 60
        self.running = False
        self.task = None

    @loader.command()
    async def aspam_text(self, message):
        """<—Ç–µ–∫—Å—Ç> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = utils.get_args_raw(message)
        if not text:
            return await utils.answer(message, self.strings("no_text"))
        self.text = text
        await utils.answer(message, self.strings("text_set"))

    @loader.command()
    async def aspam_chats(self, message):
        """<@—é–∑–µ—Ä/ID> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        self.chats = list(set(args.split()))
        await utils.answer(message, self.strings("added_chats").format(len(self.chats)))

    @loader.command()
    async def aspam_folders(self, message):
        """<–Ω–∞–∑–≤–∞–Ω–∏–µ,–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫–∏"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        self.folders = [f.strip() for f in args.split(",")]
        await utils.answer(message, self.strings("added_folders").format(len(self.folders)))

    @loader.command()
    async def aspam_delay(self, message):
        """<—Å–µ–∫> ‚Äî –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        args = utils.get_args_raw(message)
        try:
            d = int(args)
            if not 1 <= d <= 10:
                return await utils.answer(message, self.strings("invalid_delay"))
            self.delay = d
            await utils.answer(message, self.strings("delay_set").format(d))
        except:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

    @loader.command()
    async def aspam_interval(self, message):
        """<—Å–µ–∫> ‚Äî –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏"""
        args = utils.get_args_raw(message)
        try:
            i = int(args)
            if i < 10:
                return await utils.answer(message, self.strings("invalid_interval"))
            self.interval = i
            await utils.answer(message, self.strings("interval_set").format(i))
        except:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

    @loader.command()
    async def aspam_start(self, message):
        """üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.text:
            return await utils.answer(message, self.strings("no_text"))
        if not self.chats and not self.folders:
            return await utils.answer(message, self.strings("no_targets"))
        if self.running:
            return await utils.answer(message, "‚ùó –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        self.running = True
        self.task = asyncio.create_task(self._spam_loop(message))
        await utils.answer(message, self.strings("start"))

    @loader.command()
    async def aspam_stop(self, message):
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        self.running = False
        if self.task:
            self.task.cancel()
        await utils.answer(message, self.strings("stop"))

    async def _get_folder_chats(self, folder_name):
        """–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ –ø–æ –∏–º–µ–Ω–∏"""
        dialogs = await self.client.get_dialogs()
        results = []
        for dialog in dialogs:
            if isinstance(dialog, Dialog):
                folder = getattr(dialog, 'folder', None)
                if folder and folder.title.lower() == folder_name.lower():
                    results.append(dialog.entity)
        return results

    async def _spam_loop(self, message):
        while self.running:
            targets = list(self.chats)
            for folder in self.folders:
                try:
                    chats = await self._get_folder_chats(folder)
                    targets.extend(chats)
                    await utils.answer(message, self.strings("folder_stats").format(folder, len(chats)))
                except Exception as e:
                    await utils.answer(message, self.strings("error").format(folder, str(e)))

            total = len(targets)
            success = 0
            for chat in targets:
                if not self.running:
                    return
                try:
                    entity = await self.client.get_entity(chat)
                    await self.client.send_message(entity, self.text)
                    success += 1
                    if success % 5 == 0 or success == total:
                        await utils.answer(message, self.strings("sending_stats").format(success, total))
                    await asyncio.sleep(self.delay)
                except Exception as e:
                    await utils.answer(message, self.strings("error").format(chat, str(e)))

            if self.running:
                await asyncio.sleep(self.interval)
